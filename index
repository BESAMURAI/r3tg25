CODE 1 : FIND THE ERRORS

def add_numbers(a, b):
return a + b
result = add_numbers(5, 7)
pront(result)


ANSWER :

def add_numbers(a, b):
  return a + b #error
result = add_numbers(5, 7)
print(result) #error


CODE 2 : FIND ERRORS TO MULTIPLY NUMBERS

def multiply_numbers():
    result = a * b
    return result 

a = 5
b = 6
preint()


ANSWER :

def multiply_numbers(a, b): #error
    result = a * b
    return result

a = 5
b = 6
print(multiply_numbers(a, b)) #error

CODE 3 : RETURN LIST OF EVEN NUMBERS

def print_even_numbers(limit):
    even_numbers=[]
 
    for i in range(limit):
        if i % 2 != 0:
            print(i)
    
    return even_numbers

print(print_even_numbers(10))


ANSWER :

def print_even_numbers(limit):
    even_numbers = []   
    
    for i in range(limit):
        if i % 2 == 0:                 #error
            even_numbers.append(i)     #error
    
    return even_numbers

print(print_even_numbers(10))


CODE 4 : Write a function is_prime(n) that checks whether a given number n is prime or not. The function should return True if n is a prime number and False if it is not.
         Prime numbers are numbers greater than 1 that have no divisors other than 1 and themselves.

TEST CASES :

is_prime(2) 
is_prime(3) 

ANSWER:

def is_prime(n):
    if n < 2:  # Prime numbers are greater than 1
        return False
    for i in range(2, int(n ** 0.5) + 1):  # Check divisibility up to sqrt(n)
        if n % i == 0:
            return False
    return True

TEST CASES :

print(is_prime(2))  # Expected: True
print(is_prime(3))  # Expected: True

CODE 5 : Write a function reverse_string(s) that returns the reversed version of a given string s.The function should take a string s as input and return the string in reverse order. The function should not use an inbuilt function in python.

TEST CASES :

reverse_string("hello") 
print(reverse_string("12345"))   
ANSWER:

def reverse_string(s):
    reversed_str = ""  # Initialize an empty string
    for char in s:  
        reversed_str = char + reversed_str  # Add characters in reverse order
    return reversed_str

TEST CASES :

print(reverse_string("hello"))   # Expected: "olleh"
print(reverse_string("12345"))   # Expected: "54321"
